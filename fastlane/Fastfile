fastlane_require 'timeout'

@fastfile_dir = File.expand_path(File.dirname(__FILE__))
BUNDLE_ID = "com.usebutton.merchant-example"
TEST_URL = "https://btnmerchant.bttn.io/test?btn_ref=faketok-test"
EXAMPLE_APP = "#{@fastfile_dir}/../build/Build/Products/Debug-iphonesimulator/Example.app"
POST_INSTALL_PATTERN = /Example.+faketok-test/
SIM_LOG_PREDICATE = "message == 'Post install: #{TEST_URL}&from_appstore=true'"

default_platform(:ios)

platform :ios do

  desc "Current library version"
  lane :version do
    UI.message library_version
  end

  desc "Run SwiftLint on the project"
  lane :lint do
    swiftlint(
      mode: :lint,
      path: "ButtonMerchant/Source",
      output_file: "fastlane/swiftlint.result.json",
      executable: "./Pods/SwiftLint/swiftlint"
    )
  end

  desc "Run the Button merchant library tests"
  lane :test do |options|
    lint
    run_tests(
      workspace: "ButtonMerchant.xcworkspace",
      scheme: options[:scheme],
      device: "iPhone 13",
      slack_message: "button-merchant-ios #{options[:scheme]}"
    )
  end

  lane :coverage do |options|
    slather(
      use_bundle_exec: true,
      workspace: "ButtonMerchant.xcworkspace",
      proj: "ButtonMerchant.xcodeproj",
      scheme: "ButtonMerchant",
      ignore: ["Tests/**.*", "Example/**.*"],
      travis_pro: !options[:show],
      coveralls: !options[:show],
      simple_output: !options[:show],
      html: options[:show],
      show: options[:show],
      output_directory: "fastlane/html"
    )
  end

  lane :generate_refdocs do |options|
    history_path = "#{@fastfile_dir}/../docs/history/#{library_version}"
    latest_path = "#{@fastfile_dir}/../docs/latest"
    FileUtils.rm_rf(latest_path)

    jazzy(:config => ".jazzy.yml")

    FileUtils.mkdir_p(history_path)
    FileUtils.cp_r("#{latest_path}/.", history_path)
    FileUtils.rm_rf(latest_path)

    system("cd #{@fastfile_dir}/../docs; /bin/ln -sfh \"./history/#{library_version}\" \"./latest\"")
    UI.message("Reference docs generated at: #{latest_path}/index.html")
    if options[:open]
      system("open #{latest_path}/index.html")
    end
  end

  desc "Run end-to-end post install test"
  lane :post_install_test do
    system("xcrun simctl uninstall booted #{BUNDLE_ID}")
    system("xcrun simctl openurl booted '#{TEST_URL}&btn_direct=true'")
    xcodebuild(
      workspace: "ButtonMerchant.xcworkspace",
      scheme: "Example",
      destination: "platform=iOS Simulator,name=iPhone X",
      sdk: "iphonesimulator",
      configuration: "Debug",
      derivedDataPath: "./build"
    )
    system("xcrun simctl install booted #{EXAMPLE_APP}")
    system("xcrun simctl launch booted #{BUNDLE_ID}")
    capture_simulator_log()
    assert_post_install_url_in_log()
  end

  def capture_simulator_log()
    begin
      Timeout::timeout(2) {
        system("xcrun simctl spawn booted log stream \
          --predicate \"#{SIM_LOG_PREDICATE}\" \
          --level=debug > test_output/sim.log")
      }
    rescue Timeout::Error
    end
  end

  def assert_post_install_url_in_log()
    File.open "#{@fastfile_dir}/test_output/sim.log" do |file|
      result = file.find { |line| line =~ POST_INSTALL_PATTERN }
      if result.nil? || result.empty?
        UI.user_error!("ðŸ“µ  No post install url detected \n#{result}")
      else
        UI.message "âœ…  Post install url found: (#{TEST_URL})\n#{result}"
      end
    end
  end

  def library_version
    podspec = JSON.parse(`pod ipc spec ../ButtonMerchant.podspec`)
    return podspec["version"]
  end

end
